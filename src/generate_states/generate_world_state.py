import os
import argparse

import numpy as np

from tqdm import tqdm
from components.utils import FileIO
from components.get_world_states import WorldStateBuilder, WorldStateModels


def generate_world_state(
    world_state_model: WorldStateModels,
    sampled_data: dict, 
    augmented_data: dict,
    data_name: str,
    model_name: str,
    world_model_name: str,
    attr_guided: bool,
    seed: int,
    event_based: bool,
) -> None:

    file_io = FileIO()

    postfix = ''
    postfix += '_event' if event_based else ''
    postfix += '_attr' if attr_guided else ''

    data_character_dict = file_io.load_json(
        f'../data/masktom/ner/{data_name}_char_name_seed[{seed}].json'
    )

    # This are the eois generated by the eoi generator
    eoi_dict = file_io.load_json(
        f'../data/masktom/eoi/{model_name}/{data_name}{postfix}_eoi_seed[{seed}].json'
    )

    world_state_builder = WorldStateBuilder(file_io, world_state_model, world_model_name)

    world_state_data = {}
    narrative_breakdown_dict, narrative_sents_lst = {}, []
    questions_lst = []
    character_lst_lst = []
    id_lst = []
    for idx, (id, entry) in enumerate(sampled_data.items()):
    
        if event_based:
            narrative_sents = augmented_data[id]['events']
            if narrative_sents[0][0].isnumeric():
                narrative_sents = [n.split('.', 1)[-1].strip() for n in narrative_sents]
        else:
            narrative = sampled_data[id]['narrative']
            if data_name != 'fantom':
                narrative += ' '
                narrative = narrative.replace('\n\n', ' ')
                narrative = narrative.replace('\n', ' ')
                narrative_sents = narrative.split('. ')
                narrative_sents = [ele + '.' for ele in narrative_sents if ele.strip()]
                narrative_sents = [ele.replace('..', '.') for ele in narrative_sents]
            else:
                narrative_sents = narrative.split('\n')

        narrative_breakdown = [' '.join(narrative_sents[:i+1]) for i in range(len(narrative_sents))]

        character_lst = data_character_dict[id]

        # get set of ToM questions
        questions = entry['questions']
        questions = [ele['question'] for ele in questions]

        character_lst = [
            char for char in character_lst if any([char in q for q in questions])
        ]

        narrative_breakdown_dict[id] = narrative_breakdown
        narrative_sents_lst.append(narrative_sents)
        questions_lst.append(questions)
        character_lst_lst.append(character_lst)
        id_lst.append(id)

    world_state_data = world_state_builder.build_world_state(
        data_name=data_name,
        narrative_breakdown_dict=narrative_breakdown_dict,
        narrative_sents_lst=narrative_sents_lst,
        questions_lst=questions_lst,
        cur_eoi_dict=eoi_dict,
        character_lst_lst=character_lst_lst,
        id_lst=id_lst,
        world_model_name=world_model_name,
        attr_guided=attr_guided,
    )
    
    postfix = ''
    postfix += '_event' if event_based else ''
    postfix += '_attr' if attr_guided else ''

    if not os.path.exists(f'../data/world_state/{model_name}/{data_name}'):
        os.makedirs(f'../data/world_state/{model_name}/{data_name}')

    file_io.save_json(
        world_state_data, 
        f'../data/world_state/{model_name}/{data_name}/{world_model_name}{postfix}_seed[{seed}].json'
    )
